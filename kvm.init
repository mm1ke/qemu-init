#!/sbin/runscript

# Filename: kvm.init
# Autor: Michael Mair-Keimberger (m DOT mairkeimberger AT gmail DOT com)
# Date: 13.08.2009

# Copyright (C) 2015  Michael Mair-Keimberger
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Discription:
# start/stop script for qemu guests

extra_commands="tapdel"

description="Start Qemu guests"
description_tapdel="Deletes unused tap devices (like from a crashed guest)"

# programs - packages / depends
BRCTL="/sbin/brctl" # net-misc/bridge-utils
IP="/bin/ip" # sys-apps/iproute2
NC="/usr/bin/nc" # net-analyzer/netcat6

PID_DIR="/var/run/kvm"
TMP_DIR="/var/tmp"
# max supported vms
MAX_QTAP=30

# true/false
DEBUG=false

VM_NAME=${RC_SVCNAME#*.}
CONF_PATH="/etc/conf.d/kvm.${VM_NAME}"


depend(){
	need net
}

#
# scan_running_vm()
# checks other vms
#
scan_running_vm(){
	local running_vm
	local running_vm_pid

	for running_vm in ${PID_DIR}/*.pid; do
	if [ -e "${running_vm}" ]; then
		running_vm_pid="`cat ${running_vm}`"
		if (`ps -o "command=" ${running_vm_pid} | egrep "$1" >/dev/null 2>&1`); then
			match_vm=`echo ${running_vm%.pid}`
			return 1
		fi
	fi
	done
}

#
# tapdel()
# removes unused tap devices
#
tapdel(){
	local active_qtap
	# BRDEV must be set in kvm.$vmname
	if [ -z "${BRDEV}" ]; then
		ewarn "No BRDEV is set in ${CONF_PATH}"
	else
		for active_qtap in `${BRCTL} show|egrep qtap`; do
			if scan_running_vm "ifname=${active_qtap}"; then
				local stop_id="$(echo ${active_qtap} | tail -c 2)"
				stop_tap_device ${stop_id}
			fi
		done
	fi
}

#
# cfgcheck()
# make some configuration checks
#
cfgcheck(){
	#create hw lists
	local _vm_9pshare="${VM_9P_SHARE} ${VM_9P_SHARE1} ${VM_9P_SHARE2} ${VM_9P_SHARE3} ${VM_9P_SHARE4} \
		${VM_9P_SHARE5} ${VM_9P_SHARE6} ${VM_9P_SHARE7} ${VM_9P_SHARE8} ${VM_9P_SHARE9}"
	local _vm_harddisk="${VM_HARDDISK} ${VM_HARDDISK1} ${VM_HARDDISK2} ${VM_HARDDISK3} ${VM_HARDDISK4} \
		${VM_HARDDISK5} ${VM_HARDDISK6} ${VM_HARDDISK7} ${VM_HARDDISK8} ${VM_HARDDISK9}"
	local _vm_interfaces="${VM_NETWORK} ${VM_NETWORK1} ${VM_NETWORK2} ${VM_NETWORK3} ${VM_NETWORK4} \
		${VM_NETWORK5} ${VM_NETWORK6} ${VM_NETWORK7} ${VM_NETWORK8} ${VM_NETWORK9}"

	local default_msg="Please check your config (${CONF_PATH})"

	# basic tests/settings
	[ -d ${PID_DIR} ] || mkdir ${PID_DIR}
	[ -d ${TMP_DIR} ] || TMP_DIR="/var/tmp"

	if ! [ `egrep -i "^${VM_USER}" /etc/passwd` ]; then
		eerror "User \"${VM_USER}\" not found in /etc/passwd. ${default_msg}"
		return 1
	fi

	if [ -n "${VM_KERNEL}" ] && [ -n "${VM_INITRD}" ]; then
		VM_BOOT_DEV=""
	else
		VM_KERNEL=""
	fi

	# guest wont start with "host" cpu if kvm is disabled
	[ "$VM_CPU" = "host" ] && VM_ENABLE_KVM="true"

	# arch spezific configuration
	case ${VM_ARCH} in
		arm)
			# arm has only smc91c111 - see qemu-system-arm -net nic,model=?
			VM_NET_DRV="smc91c111"
			;;
		mips)
			# mips only supports up to 256mb ram
			if [ ${VM_MEMORY} -gt 256 ]; then
				VM_MEMORY=256
				ewarn " ** MIPS only supports up to 256MB ram"
			fi
			;;
	esac

	# cdrom checks
	if [ -n "${VM_CDROM}" ]; then
		if ! [ -e "${VM_CDROM}" ]; then
			eerror "Image dosn't exist. ${default_msg}"
			return 1
		fi
	fi

	# 9P directory check
	if [ -n "${_vm_9pshare}" ]; then
		for single_9p in ${_vm_9pshare}; do
			local share_name="$(echo ${single_9p}|cut -d: -f1)"
			local share_path="$(echo ${single_9p}|cut -d: -f2)"
			local share_secm="$(echo ${single_9p}|cut -d: -f3)"
			
			if [ -z ${share_name} ] || ! [ -e ${share_path} ]; then
				eerror "No name given or Path does not exist. ${default_msg}"
				return 1
			fi
			# default security model none
			if [ -z ${share_secm} ]; then
				share_secm="none"
			else
				case "${share_secm}" in
					none|NONE|mapped|MAPPED|passthrough|PASSTHROUGH) ;;
					*)
						ewarn " ** 9P(${share_name}): Unknown Security Mode - Setting default none"
						share_secm="none"
						;;
				esac
			fi
			VM_9P="${VM_9P} ${share_name}:${share_path}:${share_secm}"
		done
	fi

	# image checks/default settings
	if [ -n "${_vm_harddisk}" ]; then
		for single_hd in ${_vm_harddisk}; do
			local hd_path="$(echo ${single_hd}|cut -d: -f1)"
			local hd_if="$(echo ${single_hd}|cut -d: -f2)"
			local hd_cache="$(echo ${single_hd}|cut -d: -f3)"
			local hd_aio="$(echo ${single_hd}|cut -d: -f4)"

			if [ -z "${hd_path}" ] || [ -e "${hd_path}" ]; then
				ewarn " ** ${hd_path} not found. ${default_msg}"
				continue
			fi
			# check if image is already running
			if ! scan_running_vm "${hd_path}"; then
				eerror "This vm-image is already started by \"/etc/init.d/kvm.${match_vm##*/}\"!"
				return 1
			fi
			# set default settings for hd if nothing is set
			[ -z "${hd_cache}" ] && hd_cache="none"
			[ -z "${hd_if}" ] && hd_if="ide"
			[ -z "${hd_aio}" ] && hd_aio="threads"
			# set image format to raw if lvm partition is used
			[ -b "${hd_path}" ] && hd_path="${hd_path},format=raw"

			VM_HD="${VM_HD} ${hd_path}:${hd_if}:${hd_cache}:${hd_aio}"
		done
	fi

	# network checks/default settings
	if [ -z "${_vm_interfaces}" ]; then
		VM_REMOTE_ACCESS_LISTEN_IP="127.0.0.1"
	else
		for single_net in ${_vm_interfaces}; do
			local net_typ="$(echo ${single_net}|cut -d: -f1)"
			local net_mac="$(echo ${single_net}|cut -d: -f2)"
			local net_drv="$(echo ${single_net}|cut -d: -f3)"

			# set default network driver
			[ -z "${net_drv}" ] && net_drv="rtl8139"
			# check for mac address
			if [ -n "${net_mac}" ]; then
				if ! scan_running_vm "${net_mac}"; then
					eerror "MAC-address already used by \"/etc/init.d/kvm.${match_vm##*/}\"!"
					return 1
				fi
			else
				# set random mac address
				net_mac="`printf 'DE:AD:CA:5E:%02X:%02X\n' \
					$(($(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1) % 256)) \
					$(($(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1) % 256))`"
				ewarn " ** RANDOM MAC ADDRESS! Address will be lost on shutdown! **"
			fi

			case ${net_typ} in
				tap)
					net_tap_set=true
					# check bridge device
					if [ -n "${BRDEV}" ]; then
						if ! (${IP} link show ${BRDEV} > /dev/null 2>&1); then
							eerror "${BRDEV} dosen't exist. ${default_msg}"
							return 1
						fi
					else
						eerror "You need a bridge device! ${default_msg}"
						return 1
					fi
					# get the guest_nummber for qtap...
					local id=0;
					while (${BRCTL} show | egrep qtap${id} >/dev/null 2>&1); do
						id=$(expr ${id} + 1)
					done
					# check for max_vms
					if [ ${id} -ge ${MAX_QTAP} ]; then
						eerror "Maximum number of network connections reached. Please increase the MAX_QTAP variable."
						return 1
					fi
					;;
				user)
					if (${net_user_set}); then
						eerror "Network typ user can only be used once. ${default_msg}"
						return 1
					fi
					id="user_net"
					net_user_set=true
					;;
				*)
					ewarn "** Unknow Network Typ. Network will be disabled"
					continue
					;;
			esac

			VM_NET="${VM_NET} ${net_typ}:${net_mac}:${net_drv}:${id}"

		done

		if (${net_user_set}) && ! (${net_tap_set}); then
			[ -z "${BRDEV}" ] && VM_REMOTE_ACCESS_LISTEN_IP="127.0.0.1"
			if [ -n "${BRDEV}" ]; then
				if ! (${IP} link show ${BRDEV} > /dev/null 2>&1); then
					ewarn " ** ${BRDEV} dosen't exist. Remote Access set to 127.0.0.1"
					VM_REMOTE_ACCESS_LISTEN_IP="127.0.0.1"
				fi
			fi
		fi
	fi

	# remote access checks
	if [ -n "${VM_REMOTE_ACCESS}" ]; then
		# set listening ip
		if [ -z "${VM_REMOTE_ACCESS_LISTEN_IP}" ]; then
			VM_REMOTE_ACCESS_LISTEN_IP="`${IP} address show ${BRDEV} \
				| egrep -o '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}' \
				| head -n1`"
		fi
		# i don't use scan_running_vm here because other programms could use those ports too...
		# have to check with netstat if a port is free
		if [ -z "${VM_REMOTE_ACCESS_PORT}" ]; then
			local port_nr=0
			while $(netstat -nat | egrep "${VM_REMOTE_ACCESS_LISTEN_IP}:580${port_nr}[^0-9]" >/dev/null); do
				port_nr=$(expr ${port_nr} + 1)
			done
			VM_REMOTE_ACCESS_PORT="580${port_nr}"
		# check port if it was manuel set
		elif $(netstat -nat | egrep "${VM_REMOTE_ACCESS_LISTEN_IP}:${VM_REMOTE_ACCESS_PORT}[^0-9]" >/dev/null); then
			eerror "Port is already in use. ${default_msg}"
			return 1
		fi
	else
		ewarn " ** Remote access disabled"
		VM_DISPLAY=""
	fi

	if (${VM_ENABLE_SNAPSHOTMODE}); then
		ewarn " ** SNAPSHOT MODE! Changes in the guest system won't be saved! **"
	fi
}

#
# myconfig()
# function to generate the start config
#
myconfig(){

	# basic config
	myconfig="-name ${VM_NAME} \
		-runas ${VM_USER} \
		-monitor unix:${PID_DIR}/${VM_NAME}.sock,server,nowait \
		-pidfile ${PID_DIR}/${VM_NAME}.pid"

	# if nothing is set, qemu defaults to 128mb memory and smp=1
	[ -z "${VM_MEMORY}" ] || myconfig="${myconfig} -m ${VM_MEMORY}"
	[ -z "${VM_SMP}" ] || myconfig="${myconfig} -smp ${VM_SMP}"
	[ -z "${VM_MACHINE}" ] || myconfig="${myconfig} -machine ${VM_MACHINE}"
	[ -z "${VM_LC}" ] || myconfig="${myconfig} -k ${VM_LC}"
	[ -z "${VM_CPU}" ] || myconfig="${myconfig} -cpu ${VM_CPU}"

	if [ -n "${VM_KERNEL}" ]; then
		myconfig="${myconfig} -kernel ${VM_KERNEL} -initrd ${VM_INITRD}"
		[ -z "${VM_APPEND}" ] || myconfig="${myconfig} -append \"${VM_APPEND}\""
	fi

	# enable/disable kvm
	(${VM_ENABLE_KVM}) && myconfig="${myconfig} -enable-kvm"
	# daemonize true/false
	(${VM_ENABLE_DAEMONIZE}) && myconfig="${myconfig} -daemonize"
	# snapshotmode on/off
	(${VM_ENABLE_SNAPSHOTMODE}) && myconfig="${myconfig} -snapshot"
	# spice virtual serial port (copy/paste)
	(${VM_ENABLE_VIRTSERIAL}) && myconfig="${myconfig} -device virtio-serial \
		-chardev spicevmc,id=vdagent,name=vdagent \
		-device virtserialport,chardev=vdagent,name=com.redhat.spice.0"
	# qemu guest agent (qga)
	(${VM_ENABLE_QGA}) && myconfig="${myconfig} -device virtio-serial \
		-chardev socket,path=${PID_DIR}/${VM_NAME}-qga.sock,server,nowait,id=${VM_NAME}-qga \
		-device virtserialport,chardev=${VM_NAME}-qga,name=org.qemu.guest_agent.0"

	# remote access settings
	if [ -n "${VM_REMOTE_ACCESS}" ]; then
		case ${VM_REMOTE_ACCESS} in
			spice|SPICE)
				VM_DISPLAY="qxl"
				[ -n "${VM_REMOTE_ACCESS_PW}" ] || VM_REMOTE_ACCESS_PW="\"\",disable-ticketing"
				myconfig="${myconfig} -spice port=${VM_REMOTE_ACCESS_PORT},addr=${VM_REMOTE_ACCESS_LISTEN_IP},password=${VM_REMOTE_ACCESS_PW}"
				;;
			vnc|VNC)
				# reason for changing the port to such a strange number:
				# https://bugs.gentoo.org/show_bug.cgi?id=461744
				# https://bugs.launchpad.net/qemu/+bug/1089496
				VM_REMOTE_ACCESS_PORT=$(expr ${VM_REMOTE_ACCESS_PORT} + 59635 - 65535)
				myconfig="${myconfig} -vnc ${VM_REMOTE_ACCESS_LISTEN_IP}:${VM_REMOTE_ACCESS_PORT}"
				;;
			*)
				ewarn " Unknow option. Remote access will be disabled"
				myconfig="${myconfig} -nographic"
				;;
		esac
	else
		myconfig="${myconfig} -nographic"
	fi

	# enable/disable harddisks
	if [ -n "${VM_HD}" ]; then
		for single_hd in ${VM_HD}; do
			local hd_path="$(echo ${single_hd}|cut -d: -f1)"
			local hd_if="$(echo ${single_hd}|cut -d: -f2)"
			local hd_cache="$(echo ${single_hd}|cut -d: -f3)"
			local hd_aio="$(echo ${single_hd}|cut -d: -f4)"

			myconfig="${myconfig} \
			-drive file=${hd_path},if=${hd_if},cache=${hd_cache},aio=${hd_aio}"
		done
	fi

	# network settings
	if [ -n "${VM_NET}" ]; then
		for single_net in ${VM_NET}; do
			local net_typ="$(echo ${single_net}|cut -d: -f1)"
			local net_mac="$(echo ${single_net}|cut -d: -f2)"
			local net_drv="$(echo ${single_net}|cut -d: -f3)"
			local net_id="$(echo ${single_net}|cut -d: -f4)"

			case ${net_typ} in
				tap)
					myconfig="${myconfig} \
						-netdev tap,id="${VM_NAME}_${net_id}",ifname=qtap${net_id},script=no,downscript=no \
						-device ${net_drv},netdev="${VM_NAME}_${net_id}",mac=${net_mac}"
					;;
				user)
					myconfig="${myconfig} \
						-netdev user,id=${VM_NAME}_${net_id} \
						-device ${net_drv},netdev="${VM_NAME}_${net_id}",mac=${net_mac}"
					;;
			esac
		done
	else
		myconfig="${myconfig} -net none"
	fi


	if [ -n "${VM_9P}" ]; then
		local id=0
		for single_9p in ${VM_9P}; do
			local share_name="$(echo ${single_9p}|cut -d: -f1)"
			local share_path="$(echo ${single_9p}|cut -d: -f2)"
			local share_secm="$(echo ${single_9p}|cut -d: -f3)"
			myconfig="${myconfig} \
				-fsdev local,id="${VM_NAME}_9p_${id}",path="${share_path}",security_model="${share_secm}" \
				-device virtio-9p-pci,fsdev="${VM_NAME}_9p_${id}",mount_tag="${share_name}""
			id=$(expr ${id} + 1)
		done

	fi

	[ -z "${VM_USB}" ] || myconfig="${myconfig} -usb ${VM_USB}"
	[ -z "${VM_DISPLAY}" ] || myconfig="${myconfig} -vga ${VM_DISPLAY}"
	[ -z "${VM_AUDIO}" ] || myconfig="${myconfig} -soundhw ${VM_AUDIO}"
	[ -z "${VM_OTHERS}" ] || myconfig="${myconfig} ${VM_OTHERS}"
	[ -z "${VM_CDROM}" ] || myconfig="${myconfig} -cdrom ${VM_CDROM}"

	if ! [ -z ${VM_BOOT_DEV} ]; then
		case ${VM_BOOT_DEV} in
			floppy|a) myconfig="${myconfig} -boot a" ;;
			harddisk|c) myconfig="${myconfig} -boot c" ;;
			cdrom|d) myconfig="${myconfig} -boot d" ;;
			network|n) myconfig="${myconfig} -boot n" ;;
			*) ewarn " Unknow boot option. Won't set any boot options" ;;
		esac
	fi
}

stop_tap_device(){
	local stop_id=${1}

	einfo "Bring qtap${stop_id} interface down"
	${IP} link set dev qtap${stop_id} down
	eend $? "Failed to bring qtap${stop_id} down"

	einfo " Unlinking the bridge interface with qtap${stop_id}"
	${BRCTL} delif ${BRDEV} qtap${stop_id}
	eend $? "Failed to unlink the bridge interface to qtap${stop_id}"

	sleep 2
	einfo " Removing the tap interface: qtap${stop_id}"
	${IP} tuntap del qtap${stop_id} mode tap
}

start(){
	local qemu_bin

	# Test if requested arch is available in qemu
	# defaulting to system arch
	[ -z "${VM_ARCH}" ] && VM_ARCH="$(uname -m)"
	if command -v qemu-system-${VM_ARCH} > /dev/null ; then
		qemu_bin="/usr/bin/qemu-system-${VM_ARCH}"
	else
		eerror "No support of ${VM_ARCH} in your qemu installation"
		exit 1
	fi

	cfgcheck || return 1
	myconfig || return 1
	if [ -n "${VM_NET}" ]; then
		for single_net in ${VM_NET}; do
			local net_typ="$(echo ${single_net}|cut -d: -f1)"
			local net_id="$(echo ${single_net}|cut -d: -f4)"
	
			if [ ${net_typ} = "tap" ]; then
				tap_enabled=true
				einfo "Setting up the tap interface: qtap${start_id}"
				${IP} tuntap add dev qtap${start_id} mode tap user ${VM_USER} || return 1
				einfo " Linking the bridge interface with qtap${start_id}"
				${BRCTL} addif ${BRDEV} qtap${start_id} || return 1
				einfo " Bring qtap${start_id} interface up"
				${IP} link set dev qtap${start_id} up promisc on || return 1
			fi
		done
	fi

	# print some important information
	ebegin "Starting ${VM_NAME}..."
	[ -n "${VM_REMOTE_ACCESS}" ] && ebegin " remote access via ${VM_REMOTE_ACCESS} on ${VM_REMOTE_ACCESS_LISTEN_IP}:${VM_REMOTE_ACCESS_PORT}"
	if [ -n "${VM_9P}" ]; then
		ebegin " Enabled shared folders:"
		for single_9p in ${VM_9P}; do
			local share_name="$(echo ${single_9p}|cut -d: -f1)"
			local share_path="$(echo ${single_9p}|cut -d: -f2)"
			local share_secm="$(echo ${single_9p}|cut -d: -f3)"
			ebegin "  == ${share_path} / ${share_name} / ${share_secm}"
		done
	fi

	(${DEBUG}) && printf "* Qemu settings:\n\t \
		qemu-bin: ${qemu_bin}\n\t \
		tmpdir: ${TMP_DIR}\n\t \
		user: ${VM_USER}\n\t \
		memory: ${VM_MEMORY} \n\t \
		kernel: ${VM_KERNEL}\n\t \
		kernel cmd: ${VM_APPEND}\n\t \
		initrd: ${VM_INITRD}\n\t \
		bridge device: ${BRDEV}\n\t \
		remote-access-port: ${VM_REMOTE_ACCESS_PORT}\n\t \
		remote-access-typ: ${VM_REMOTE_ACCESS}\n\t \
		boot from: ${VM_BOOT_DEV}\n\t \
		boot media: ${VM_CDROM}\n\t \
		full config: ${myconfig}\n"

	# Start the Virtual Machine
	# start guest with /bin/sh, otherwise qemu breaks with
	# multiple append statements (probably a qemu or runscript bug)
	/bin/sh/ -c "TMPDIR="${TMP_DIR}" ${qemu_bin} ${myconfig} >/dev/null"

	# remove tap devices if the guest system couldn't be started
	if [ "$?" != "0" ]; then
		if (${tap_enabled}); then
			eerror "Failed to start ${VM_NAME}, shuting down qtap devices"
			for single_net in ${VM_NET}; do
				local net_typ="$(echo ${single_net}|cut -d: -f1)"
				local net_id="$(echo ${single_net}|cut -d: -f4)"
				[ ${net_typ} = "tap" ] && stop_tap_device ${net_id}
			done
		fi
		return 1
	fi

	eend $?
}

#
# stop()
# stopping the vm
#
stop(){
	# set default kill wait to 80 seconds
	[ -z "${VM_KILL_WAIT}" ] && VM_KILL_WAIT=80

	local KVM_PID="`cat ${PID_DIR}/${VM_NAME}.pid`"

	if (ps -p ${KVM_PID} --no-heading >/dev/null 2>&1); then
		# find all linked qtap devices
		for id in $(ps -o "command=" ${KVM_PID} | grep -o qtap.); do
			local stop_id="${stop_id} $(echo ${id}|tail -c 2)"
		done

		ebegin "Stopping ${VM_NAME}"
		# sending via nc (netcat) the shutdown command
		echo "system_powerdown" | ${NC} --unix -q1 ${PID_DIR}/${VM_NAME}.sock > /dev/null 2>&1
		# waiting for system to shutdown
		einfon "Waiting ${VM_KILL_WAIT} seconds for ${VM_NAME} to shutdown."
		local cnt=0
		while [ -n "`ps -p ${KVM_PID} --no-heading`" ]; do
			cnt=$(expr ${cnt} + 2)
			if [ ${cnt} -gt ${VM_KILL_WAIT} ]; then
				echo
				eerror " Failed to shuddown ${VM_NAME}, Guest will be killed."
				# kill qemu
				kill -9 ${KVM_PID} > /dev/null 2>&1
				sleep 1
				ewarn " Killed ${VM_NAME}"
				break
			fi
			sleep 2
			printf "."
		done
		echo
		for tap_id in ${stop_id}; do
			if ! $(${BRCTL} show|grep qtap${tap_id} >/dev/null); then
				ewarn "Couldn't find a qtap device. Please run \"/etc/init.d/kvm.init tapdel\""
				continue
			fi
			stop_tap_device ${tap_id}
		done
		# stop qtap device
		[ -z "${stop_id}" ] || stop_tap_device

		# remove remaining files
		rm -rf ${PID_DIR}/${VM_NAME}.pid
		rm -rf ${PID_DIR}/${VM_NAME}.sock
		rm -rf ${PID_DIR}/${VM_NAME}-qga.sock

	else
		ewarn "Couldn't find the process for ${VM_NAME}, guest might already down."
		eend 0
	fi

	eend 0
}
